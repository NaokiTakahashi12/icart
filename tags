!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
FORCE_ROTATE_RECOVERY_H	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	2;"	d
ForceRotateRecovery	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^    class ForceRotateRecovery : public nav_core::RecoveryBehavior {$/;"	c	namespace:force_rotate_recovery
ForceRotateRecovery	force_rotate_recovery/src/force_rotate_recovery.cpp	/^    ForceRotateRecovery::ForceRotateRecovery() : $/;"	f	class:force_rotate_recovery::ForceRotateRecovery
ICartMiniHWSim	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^    class ICartMiniHWSim : public gazebo_ros_control::RobotHWSim$/;"	c	namespace:icart_mini_gazebo	file:
ICartMiniHWSimPtr	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^    typedef boost::shared_ptr<ICartMiniHWSim> ICartMiniHWSimPtr;$/;"	t	namespace:icart_mini_gazebo	file:
ODOMETRY_PUBLISHER_H_	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	2;"	d
OdometryPublisher	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	/^    class OdometryPublisher{$/;"	c	namespace:combine_dr_measurements
OdometryPublisher	combine_dr_measurements/src/odometry_publisher.cpp	/^    OdometryPublisher::OdometryPublisher(ros::NodeHandle &nh) :$/;"	f	class:combine_dr_measurements::OdometryPublisher
SyncPolicy	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	/^        typedef message_filters::sync_policies::ApproximateTime<nav_msgs::Odometry, sensor_msgs::Imu> SyncPolicy;$/;"	t	class:combine_dr_measurements::OdometryPublisher
TFrog	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  TFrog(){$/;"	f	class:TFrog
TFrog	icart_mini_driver/src/icart_mini_driver_node.cpp	/^class TFrog : public hardware_interface::RobotHW$/;"	c	file:
WaypointsNavigation	waypoints_navigation/src/waypoints_nav.cpp	/^    WaypointsNavigation() :$/;"	f	class:WaypointsNavigation
WaypointsNavigation	waypoints_navigation/src/waypoints_nav.cpp	/^class WaypointsNavigation{$/;"	c	file:
WaypointsSaver	waypoints_navigation/src/waypoints_saver.cpp	/^    WaypointsSaver() : $/;"	f	class:WaypointsSaver
WaypointsSaver	waypoints_navigation/src/waypoints_saver.cpp	/^class WaypointsSaver{$/;"	c	file:
__init__	icart_mini_navigation/scripts/navigation_strategy.py	/^    def __init__(self):$/;"	m	class:talk_node
acc_lim_th_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        double sim_granularity_, min_rotational_vel_, max_rotational_vel_, acc_lim_th_, tolerance_, frequency_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
clear_costmaps_srv_	waypoints_navigation/src/waypoints_nav.cpp	/^    ros::ServiceClient clear_costmaps_srv_;$/;"	m	class:WaypointsNavigation	file:
cmdVelCallback	waypoints_navigation/src/waypoints_nav.cpp	/^    void cmdVelCallback(const geometry_msgs::Twist &msg){$/;"	f	class:WaypointsNavigation
cmd_	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  double cmd_[2];$/;"	m	class:TFrog	file:
cmd_	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^        double cmd_[2];$/;"	m	class:icart_mini_gazebo::ICartMiniHWSim	file:
cmd_vel_sub_	waypoints_navigation/src/waypoints_nav.cpp	/^    ros::Subscriber cmd_vel_sub_;$/;"	m	class:WaypointsNavigation	file:
combine_dr_measurements	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	/^namespace combine_dr_measurements{$/;"	n
combine_dr_measurements	combine_dr_measurements/src/odometry_publisher.cpp	/^namespace combine_dr_measurements{$/;"	n	file:
costmap_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        costmap_2d::Costmap2D costmap_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
eff_	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  double eff_[2];$/;"	m	class:TFrog	file:
eff_	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^        double eff_[2];$/;"	m	class:icart_mini_gazebo::ICartMiniHWSim	file:
filename_	waypoints_navigation/src/waypoints_saver.cpp	/^    std::string filename_;$/;"	m	class:WaypointsSaver	file:
finishPoseCallback	waypoints_navigation/src/waypoints_saver.cpp	/^    void finishPoseCallback(const geometry_msgs::PoseStamped &msg){$/;"	f	class:WaypointsSaver
finish_pose_	waypoints_navigation/src/waypoints_nav.cpp	/^    geometry_msgs::Pose finish_pose_;$/;"	m	class:WaypointsNavigation	file:
finish_pose_	waypoints_navigation/src/waypoints_saver.cpp	/^    geometry_msgs::PoseStamped finish_pose_;$/;"	m	class:WaypointsSaver	file:
finish_pose_sub_	waypoints_navigation/src/waypoints_saver.cpp	/^    ros::Subscriber finish_pose_sub_;$/;"	m	class:WaypointsSaver	file:
force_rotate_recovery	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^namespace force_rotate_recovery{$/;"	n
force_rotate_recovery	force_rotate_recovery/src/force_rotate_recovery.cpp	/^namespace force_rotate_recovery {$/;"	n	file:
frequency_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        double sim_granularity_, min_rotational_vel_, max_rotational_vel_, acc_lim_th_, tolerance_, frequency_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
getPeriod	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  ros::Duration getPeriod() const {return ros::Duration(0.01);}$/;"	f	class:TFrog
getRobotPosGL	waypoints_navigation/src/waypoints_nav.cpp	/^    tf::StampedTransform getRobotPosGL(){$/;"	f	class:WaypointsNavigation
getTime	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  ros::Time getTime() const {return ros::Time::now();}$/;"	f	class:TFrog
global_costmap_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        costmap_2d::Costmap2DROS* global_costmap_, *local_costmap_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
has_activate_	waypoints_navigation/src/waypoints_nav.cpp	/^    bool has_activate_;$/;"	m	class:WaypointsNavigation	file:
icart_mini_gazebo	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^namespace icart_mini_gazebo$/;"	n	file:
imu_sub_	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	/^        message_filters::Subscriber<sensor_msgs::Imu> imu_sub_;$/;"	m	class:combine_dr_measurements::OdometryPublisher
initSim	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^        bool initSim(const std::string& robot_namespace, ros::NodeHandle model_nh, gazebo::physics::ModelPtr parent_model,$/;"	f	class:icart_mini_gazebo::ICartMiniHWSim
initialize	force_rotate_recovery/src/force_rotate_recovery.cpp	/^    void ForceRotateRecovery::initialize(std::string name, tf::TransformListener* tf,$/;"	f	class:force_rotate_recovery::ForceRotateRecovery
initialized_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        bool initialized_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
jnt_state_interface_	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  hardware_interface::JointStateInterface    jnt_state_interface_;$/;"	m	class:TFrog	file:
jnt_vel_interface_	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  hardware_interface::VelocityJointInterface jnt_vel_interface_;$/;"	m	class:TFrog	file:
joint_	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^        gazebo::physics::JointPtr joint_[2];$/;"	m	class:icart_mini_gazebo::ICartMiniHWSim	file:
js_interface_	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^        hardware_interface::JointStateInterface js_interface_;$/;"	m	class:icart_mini_gazebo::ICartMiniHWSim	file:
last_moved_time_	waypoints_navigation/src/waypoints_nav.cpp	/^    double last_moved_time_;$/;"	m	class:WaypointsNavigation	file:
local_costmap_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        costmap_2d::Costmap2DROS* global_costmap_, *local_costmap_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
main	combine_dr_measurements/src/odometry_publisher.cpp	/^int main(int argc, char *argv[]){$/;"	f
main	icart_mini_driver/src/icart_mini_driver_node.cpp	/^int main(int argc, char **argv)$/;"	f
main	waypoints_navigation/src/waypoints_nav.cpp	/^int main(int argc, char *argv[]){$/;"	f
main	waypoints_navigation/src/waypoints_saver.cpp	/^int main(int argc, char *argv[]){$/;"	f
marker_pub_	waypoints_navigation/src/waypoints_nav.cpp	/^    ros::Publisher marker_pub_;$/;"	m	class:WaypointsNavigation	file:
max_drive_joint_torque_	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^        static const double max_drive_joint_torque_ = 20.0;$/;"	m	class:icart_mini_gazebo::ICartMiniHWSim	file:
max_rotational_vel_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        double sim_granularity_, min_rotational_vel_, max_rotational_vel_, acc_lim_th_, tolerance_, frequency_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
max_update_rate_	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	/^        double max_update_rate_;$/;"	m	class:combine_dr_measurements::OdometryPublisher
min_rotational_vel_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        double sim_granularity_, min_rotational_vel_, max_rotational_vel_, acc_lim_th_, tolerance_, frequency_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
move_base_action_	waypoints_navigation/src/waypoints_nav.cpp	/^    actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> move_base_action_;$/;"	m	class:WaypointsNavigation	file:
name_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        std::string name_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
navigationFinished	waypoints_navigation/src/waypoints_nav.cpp	/^    bool navigationFinished(){$/;"	f	class:WaypointsNavigation
nh_	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	/^        ros::NodeHandle &nh_;$/;"	m	class:combine_dr_measurements::OdometryPublisher
nh_	waypoints_navigation/src/waypoints_saver.cpp	/^    ros::NodeHandle nh_;$/;"	m	class:WaypointsSaver	file:
odom_pub_	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	/^        ros::Publisher odom_pub_;$/;"	m	class:combine_dr_measurements::OdometryPublisher
odom_sub_	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	/^        message_filters::Subscriber<nav_msgs::Odometry> odom_sub_;$/;"	m	class:combine_dr_measurements::OdometryPublisher
onNavigationPoint	waypoints_navigation/src/waypoints_nav.cpp	/^    bool onNavigationPoint(const geometry_msgs::Point &dest, double dist_err = 0.5){$/;"	f	class:WaypointsNavigation
operator >>	waypoints_navigation/src/waypoints_nav.cpp	/^void operator >> (const YAML::Node& node, T& i)$/;"	f
pos_	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  double pos_[2];$/;"	m	class:TFrog	file:
pos_	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^        double pos_[2];$/;"	m	class:icart_mini_gazebo::ICartMiniHWSim	file:
publishMarkers	waypoints_navigation/src/waypoints_nav.cpp	/^    void publishMarkers(){$/;"	f	class:WaypointsNavigation
r	icart_mini_navigation/scripts/navigation_strategy.py	/^r = rospy.Rate(10)$/;"	v
rate_	waypoints_navigation/src/waypoints_nav.cpp	/^    ros::Rate rate_;$/;"	m	class:WaypointsNavigation	file:
read	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  void read(){$/;"	f	class:TFrog
readFile	waypoints_navigation/src/waypoints_nav.cpp	/^    bool readFile(const std::string &filename){$/;"	f	class:WaypointsNavigation
readSim	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^        void readSim(ros::Time time, ros::Duration period){$/;"	f	class:icart_mini_gazebo::ICartMiniHWSim
received_imu_	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	/^        sensor_msgs::Imu received_imu_;$/;"	m	class:combine_dr_measurements::OdometryPublisher
received_odom_	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	/^        nav_msgs::Odometry received_odom_;$/;"	m	class:combine_dr_measurements::OdometryPublisher
reopen	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  void reopen(){$/;"	f	class:TFrog
robot_frame_	waypoints_navigation/src/waypoints_nav.cpp	/^    std::string robot_frame_, world_frame_;$/;"	m	class:WaypointsNavigation	file:
robot_frame_	waypoints_navigation/src/waypoints_saver.cpp	/^    std::string robot_frame_;$/;"	m	class:WaypointsSaver	file:
run	combine_dr_measurements/src/odometry_publisher.cpp	/^    void OdometryPublisher::run(){$/;"	f	class:combine_dr_measurements::OdometryPublisher
run	icart_mini_navigation/scripts/navigation_strategy.py	/^    def run(self):$/;"	m	class:talk_node
run	waypoints_navigation/src/waypoints_nav.cpp	/^    void run(){$/;"	f	class:WaypointsNavigation
run	waypoints_navigation/src/waypoints_saver.cpp	/^    void run(){$/;"	f	class:WaypointsSaver
runBehavior	force_rotate_recovery/src/force_rotate_recovery.cpp	/^    void ForceRotateRecovery::runBehavior(){$/;"	f	class:force_rotate_recovery::ForceRotateRecovery
save	waypoints_navigation/src/waypoints_saver.cpp	/^    void save(){$/;"	f	class:WaypointsSaver
save_joy_button_	waypoints_navigation/src/waypoints_saver.cpp	/^    int save_joy_button_;$/;"	m	class:WaypointsSaver	file:
shouldSendGoal	waypoints_navigation/src/waypoints_nav.cpp	/^    bool shouldSendGoal(){$/;"	f	class:WaypointsNavigation
sim_granularity_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        double sim_granularity_, min_rotational_vel_, max_rotational_vel_, acc_lim_th_, tolerance_, frequency_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
sleep	waypoints_navigation/src/waypoints_nav.cpp	/^    void sleep(){$/;"	f	class:WaypointsNavigation
sr_response	icart_mini_navigation/scripts/navigation_strategy.py	/^    def sr_response(self, message):$/;"	m	class:talk_node
startNavigationGL	waypoints_navigation/src/waypoints_nav.cpp	/^    void startNavigationGL(const geometry_msgs::Point &dest){$/;"	f	class:WaypointsNavigation
startNavigationGL	waypoints_navigation/src/waypoints_nav.cpp	/^    void startNavigationGL(const geometry_msgs::Pose &dest){$/;"	f	class:WaypointsNavigation
syncMsgsCB	combine_dr_measurements/src/odometry_publisher.cpp	/^    void OdometryPublisher::syncMsgsCB(const nav_msgs::OdometryConstPtr &odom, const sensor_msgs::ImuConstPtr &imu){$/;"	f	class:combine_dr_measurements::OdometryPublisher
sync_	combine_dr_measurements/include/combine_dr_measurements/odometry_publisher.h	/^        message_filters::Synchronizer<SyncPolicy> sync_;$/;"	m	class:combine_dr_measurements::OdometryPublisher
syscommandCallback	waypoints_navigation/src/waypoints_nav.cpp	/^    void syscommandCallback(const std_msgs::String &msg){$/;"	f	class:WaypointsNavigation
syscommand_pub	icart_mini_navigation/scripts/navigation_strategy.py	/^syscommand_pub = rospy.Publisher('syscommand', String, queue_size=10)$/;"	v
syscommand_sub_	waypoints_navigation/src/waypoints_nav.cpp	/^    ros::Subscriber syscommand_sub_;$/;"	m	class:WaypointsNavigation	file:
talk_node	icart_mini_navigation/scripts/navigation_strategy.py	/^class talk_node(object):$/;"	c
tf_listener_	waypoints_navigation/src/waypoints_nav.cpp	/^    tf::TransformListener tf_listener_;$/;"	m	class:WaypointsNavigation	file:
tf_listener_	waypoints_navigation/src/waypoints_saver.cpp	/^    tf::TransformListener tf_listener_;$/;"	m	class:WaypointsSaver	file:
tolerance_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        double sim_granularity_, min_rotational_vel_, max_rotational_vel_, acc_lim_th_, tolerance_, frequency_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
vel_	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  double vel_[2];$/;"	m	class:TFrog	file:
vel_	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^        double vel_[2];$/;"	m	class:icart_mini_gazebo::ICartMiniHWSim	file:
vj_interface_	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^        hardware_interface::VelocityJointInterface vj_interface_;$/;"	m	class:icart_mini_gazebo::ICartMiniHWSim	file:
waypointsJoyCallback	waypoints_navigation/src/waypoints_saver.cpp	/^    void waypointsJoyCallback(const sensor_msgs::Joy &msg){$/;"	f	class:WaypointsSaver
waypointsVizCallback	waypoints_navigation/src/waypoints_saver.cpp	/^    void waypointsVizCallback(const geometry_msgs::PointStamped &msg){$/;"	f	class:WaypointsSaver
waypoints_	waypoints_navigation/src/waypoints_nav.cpp	/^    std::vector<geometry_msgs::PointStamped> waypoints_;$/;"	m	class:WaypointsNavigation	file:
waypoints_	waypoints_navigation/src/waypoints_saver.cpp	/^    std::vector<geometry_msgs::PointStamped> waypoints_;$/;"	m	class:WaypointsSaver	file:
waypoints_joy_sub_	waypoints_navigation/src/waypoints_saver.cpp	/^    ros::Subscriber waypoints_joy_sub_;$/;"	m	class:WaypointsSaver	file:
waypoints_viz_sub_	waypoints_navigation/src/waypoints_saver.cpp	/^    ros::Subscriber waypoints_viz_sub_;$/;"	m	class:WaypointsSaver	file:
world_frame_	waypoints_navigation/src/waypoints_nav.cpp	/^    std::string robot_frame_, world_frame_;$/;"	m	class:WaypointsNavigation	file:
world_frame_	waypoints_navigation/src/waypoints_saver.cpp	/^    std::string world_frame_;$/;"	m	class:WaypointsSaver	file:
world_model_	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        base_local_planner::CostmapModel* world_model_;$/;"	m	class:force_rotate_recovery::ForceRotateRecovery
write	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  void write(){$/;"	f	class:TFrog
writeSim	icart_mini_gazebo/src/icart_mini_hw_sim.cpp	/^        void writeSim(ros::Time time, ros::Duration period){$/;"	f	class:icart_mini_gazebo::ICartMiniHWSim
~ForceRotateRecovery	force_rotate_recovery/include/force_rotate_recovery/force_rotate_recovery.h	/^        ~ForceRotateRecovery(){ delete world_model_; }$/;"	f	class:force_rotate_recovery::ForceRotateRecovery
~TFrog	icart_mini_driver/src/icart_mini_driver_node.cpp	/^  ~TFrog(){$/;"	f	class:TFrog
